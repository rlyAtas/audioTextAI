import TelegramBot, { Message } from 'node-telegram-bot-api';
import { transcribeAudio } from '../../services/transcribeAudio.js';
import { sendTranscriptionResult } from '../../utils/sendTranscriptionResult.js';
import { getLogger } from '../../classes/Logger.js';

const logger = getLogger();

/*
 * –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
 * –û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–¥–µ–Ω—Ç–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º –∫–∞–∫ –∞—É–¥–∏–æ, –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∫–∞–∫ –≥–æ–ª–æ—Å
 * –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–º—ã–∫–∞–µ–º —Å—é–¥–∞
 */
export async function handlerAudio(bot: TelegramBot, msg: Message) {
  const chatId = msg.chat.id;

  try {
    logger.debug(`[handlerAudio] msg = ${JSON.stringify(msg)}`);
    const audio = msg.audio || msg.document || msg.voice;
    const supportedTypes = [
      'audio/mpeg',
      'audio/wav',
      'audio/x-wav',
      'audio/ogg',
      'audio/mp4',
      'audio/flac',
      'audio/aac',
    ];
    if (!audio || !audio.mime_type || !supportedTypes.includes(audio.mime_type)) {
      bot.sendMessage(chatId, '–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.');
      return;
    }

    bot.sendMessage(
      chatId,
      'üéß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç!',
    );

    const fileLink = await bot.getFileLink(audio.file_id);
    const resultFilePath = await transcribeAudio(fileLink, chatId);
    await sendTranscriptionResult(bot, chatId, resultFilePath);
  } catch (err: unknown) {
    logger.error(`[handlerAudio] msg = ${JSON.stringify(msg)}, err = ${err}`);
    bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.');
  }
}

// export function handlerAudio(bot: TelegramBot) {
//   return async (msg: Message) => {
//     const chatId = msg.chat.id;
//     // msg.from.language_code

//     try {
//       logger.debug(`[handlerAudio] msg = ${JSON.stringify(msg)}`);
//       const audio = msg.audio || msg.document || msg.voice;
//       const supportedTypes = [
//         'audio/mpeg',
//         'audio/wav',
//         'audio/x-wav',
//         'audio/ogg',
//         'audio/mp4',
//         'audio/flac',
//         'audio/aac',
//       ];
//       if (!audio || !audio.mime_type || !supportedTypes.includes(audio.mime_type)) {
//         bot.sendMessage(chatId, '–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.');
//         return;
//       }

//       bot.sendMessage(
//         chatId,
//         'üéß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç!',
//       );

//       const fileLink = await bot.getFileLink(audio.file_id);
//       const resultFilePath = await transcribeAudio(fileLink, chatId);
//       await sendTranscriptionResult(bot, chatId, resultFilePath);
//     } catch (err: unknown) {
//       logger.error(`[handlerAudio] msg = ${JSON.stringify(msg)}, err = ${err}`);
//       bot.sendMessage(
//         chatId,
//         '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.',
//       );
//     }
//   };
// }
